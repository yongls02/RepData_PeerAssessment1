set.seed(1)
clear
cls
y
cls
y <- 1:5
y
?lm
system.time(x <- fast(rnorm(1000)))
x <- 1
x
msg <- "hello"
msg
x <- (1:10)
x
X <- 1
x
x <- 2
x
x <- 1:30
x
x <- 1L
attributes()
attributes(x)
attributes(1L)
attributes("x")
m <- matrix(2,3)
m
matrix(1:6, nrow=2, ncol=3)
m
dim(m)
attributes(m)
x <- factor(c("yes","yes","no"))
x
table(x)
unclass(x)
attrib(,"levels")
attr(,"levels")
set.seed(1)
rpois(5,2)
x <- matrix(1:6, 2,3)
x
solve(x)
x<-matrix(1:4,2,2)
solve(x)
x<-matrix(1:4,2,2)
x
x$setmean(x)
x$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x <- (1:10)
x
cachemean(x)
x <- list(1:10)
x
cachemean(x)
install.packages("swirl")
swirl()
library(swirl)
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
>c
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+100
(z*2+100)
(z*2+100)
info()
skip()
my_div
swirl()
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
files()
list.files()
?list.files
args()
list.files.args()
args(list.files)
old.dir <- pwd()
old.dir <- getwd()
dir.create("testdir")
setwe("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R","mytest2.R")
file.path("folder1","folder2")
>dir.create
?dir.create
file.path(dir.create("testdir2"),dir.create("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive-TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
swift()
library("swift")
?library
library(base)
swift()
swift
swift()
load(swift)
load("swift")
start()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:lentht(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name = c(my_char, "Alex")
my_name
paster(my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3, c("X","Y","Z"))
paste(1:3, c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z,100))
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == Na
my_data == NA
sum(my_data)
sum(my_nas)
sum(my_na)
my_data
0/0
inf-inf
Inf - Inf
source('C:/MOOC/GetNCleanData/quiz1.R')
dd <- data["VAL">1000000,]
data["FES"]
dd <- data["VAL">1000000;;;;;;;;;;;;;;;;;;,]
dd <- data["VAL"==24,]
dd <- data["VAL">=24,]
dd <- data[VAL>=24,]
dd <- data['VAL'>=24,]
dd <- data[data$val == 24]
dd <- data[data$val == 24,]
head(data)
attributes(data)
attributes(data[VAL)])
attributes(data[VAL])
attributes(data[,VAL])
head(data)
fields(data)
name(data)
dd <- data["VAL"==24]
dd <- data["VAL"==24,]
dd <- data["VAL"=24,]
data[,VAL]
data[,"VAL"]
dd <- data["VAL"==24,]
dd <- data["VAL"=='24',]
dd <- data$VAL == 24
dd <- data[data$VAL == 24]
dd <- data[data$VAL == 24,]
dd[,"VAL"]
dd <- data[data$VAL == 24,]
yy <- dd[!is.NA.dd[,"VAL"]]
yy <- dd[!is.NA(dd[,"VAL"]])
yy <- dd[!is.NA(dd[,"VAL"])])
yy <- dd[!is.NA(dd[,"VAL"])]
yy <- dd[!is.na(dd[,"VAL"])]
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
source("https://api.github.com/users/jtleek/repos")
source("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r")
?"source"
library(httr)
oauth_endpoints("github")
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
myapp <- oauth_app("github",
key = "d069dfca4bd8aff0b535",
secret = "57d6a667371bd7c26bed7191a73be6a9ad1e80aa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library()
library(RCurl)
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
install.packages("curl")
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
source('C:/MOOC/GetNCleanData/quiz2/quiz2.R')
install.packages(sqldf)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
?read.csv
mydf <- read.csv(path2csv,stringAsFactors=FALSE)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.table(path2csv,stringsAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
library("dplyr")
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran, -(X:size))
select(cran,-(5:20))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country="US")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran,size>100500, r_os = "linux-gnu")
?filter
filter(cran,size>100500 ^ r_os = "linux-gnu")
filter(cran,size>100500 and r_os = "linux-gnu")
filter(cran,size>100500 and r_os || "linux-gnu")
filter(cran,size>100500 & r_os == "linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version), ip_id)
cran3 <- select(cran, cran:ip_id,package,size)
cran3 <- select(cran, ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran3, avg_bytes=mean(size))
summarize(cran, avg_bytes=mean(size))
library(xlsx)
library(rjava)
library(rJava)
library(rJava)
install.packages(rjava)
install.packages(java)
install.packages("rJava")
library(rJava)
library("rjava")
library(rJava)
library(rJava)
installed.packages()
install.packages("git2r")
library(xlsx)
r.version()
R.version
library("xml")
r.version()
r.version
library(xml)
library
?splom
??splom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
ggplot(movies, aes(votes, rating))
library(datasets)
library(lattice)
airquality
airquality <- transform(airquality, Month = factor(month))
airquality <- transform(airquality, Month = factor(Month))
head(airquality)
set.seed(10)
x <- rnorm(100)
x
f <- rep(0:1 each=50)
f <- rep(0:1, each=50)
f
y <- x+f-f*x+rnorm(100,sd=0.5)
y
f <- factor(f, labels = c("Group 1", "Group 2"))
f
xyplot(y~x | f, layout=c(2,1))
xyplot(y~x | f, layout=c(1,2))
set.seed(1)
library(plyr)
setwd("C:/MOOC/ReproducibleResearch/project1/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
data$steps <- as.numeric(data$steps)
spd <- aggregate(steps ~ date, data, sum)
mean(spd$steps, na.rm=TRUE)
as <- aggregate(steps ~ interval, data, mean)
cleandata <- data
cleandata$steps     <- if (is.na(cleandata$steps)){
as[as$interval==cleandata$interval,"steps"]
}
cleandata$date <- as.Date(cleandata$date, format = "%Y-%m-%d")
weekdays(cleandata$date, abbreviate=TRUE)
cleandata$daytype <- if (weekdays(cleandata$date)=="Saturday" || weekdays(cleandata$date=="Sunday")) "weekday" else "weekend"
cleandata$daytype <- if (weekdays(cleandata$date)=="Saturday") "weekday" else "weekend"
View(cleandata)
weekdays(cleandata$date)
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") || (weekdays(cleandata$date=="Sunday"))) "weekday" else "weekend"
class(cleandata$date)
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") | (weekdays(cleandata$date=="Sunday"))) "weekday" else "weekend"
as.Date(cleandata$date)
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") )) "weekday" else "weekend"
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") ) "weekday" else "weekend"
cleandata$daytype <- if ((weekdays(cleandata$date)=="Sunday") ) "weekday" else "weekend"
View(cleandata)
cleandata$daytype <- if ((weekdays(cleandata$date, abbreviate=TRUE)=="Sun") ) "weekday" else "weekend"
View(cleandata)
weekdays(cleandata[1,date])
weekdays(cleandata[1,2])
weekdays(cleandata[1,2], abbreviate=TRUE)
class(weekdays(cleandata[1,2], abbreviate=TRUE))
(weekdays(cleandata[1,2], abbreviate=TRUE) == "Mon")
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") | (weekdays(cleandata$date=="Sunday"))) "weekend" else "weekday"
cleandata$daytype <- if ((weekdays(cleandata$date)=="Saturday") %%||%% (weekdays(cleandata$date=="Sunday"))) "weekend" else "weekday"
cleandata$daytype <- if ((weekdays(cleandata$date) == "Saturday") || (weekdays(cleandata$date == "Sunday"))) "weekend" else "weekday"
cleandata$date <- as.Date(cleandata$date, format = "%Y/%m/%d")
View(cleandata)
cleandata <- data
cleandata$steps     <- if (is.na(cleandata$steps)){
as[as$interval==cleandata$interval,"steps"]
}
cleandata$date <- as.Date(cleandata$date, format = "%Y/%m/%d")
cleandata$date <- as.Date(cleandata$date, format = "%Y-%m-%d")
View(cleandata)
cleandata <- data
cleandata$steps     <- if (is.na(cleandata$steps)){
as[as$interval==cleandata$interval,"steps"]
dd
)
cleandata$date <- as.Date(cleandata$date, format = "%Y-%m-%d")
View(cleandata)
dayofweeks(cleandata[1,2])
weekdays(cleandata[1,2])
if (weekdays(cleandata[1,2])=="Monday") cleandata$daytype="weekday"
cleandata$daytype <- if (weekdays(cleandata$date)=="Saturday"){
"weekend" }
else if (weekends(cleandata$date=="Sunday")) {
"weekend" }
else { "weekday" }
cleandata$daytype <- if(weekdays(cleandata$date)=="Saturday"){
"weekend" }
else if(weekends(cleandata$date=="Sunday")){
"weekend" }
else { "weekday" }
if(weekdays(cleandata$date)=="Saturday"){
cleandata$type <- "weekend" }
else { if(weekends(cleandata$date=="Sunday")){
cleandata$type <- "weekend" }
else { cleandata$type <- "weekday" } }
if(weekdays(cleandata$date)=="Saturday"){
cleandata$type <- "weekend"
} else { if(weekends(cleandata$date=="Sunday")){
cleandata$type <- "weekend"
} else { cleandata$type <- "weekday" } }
if(weekdays(cleandata$date)=="Saturday"){
cleandata$type <- "weekend"
} else { if(weekdays(cleandata$date=="Sunday")){
cleandata$type <- "weekend"
} else { cleandata$type <- "weekday" } }
